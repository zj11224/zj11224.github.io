<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zj11224.github.io</id>
    <title>ZJ Blog</title>
    <updated>2022-06-08T16:36:03.194Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zj11224.github.io"/>
    <link rel="self" href="https://zj11224.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zj11224.github.io/images/avatar.png</logo>
    <icon>https://zj11224.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, ZJ Blog</rights>
    <entry>
        <title type="html"><![CDATA[网络规划笔记（暂时）]]></title>
        <id>https://zj11224.github.io/post/wang-luo-gui-hua-bi-ji-zan-shi/</id>
        <link href="https://zj11224.github.io/post/wang-luo-gui-hua-bi-ji-zan-shi/">
        </link>
        <updated>2022-06-08T16:27:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="网络信息系统体系架构与网络生命周期简答题-名词解释范围">网络信息系统体系架构与网络生命周期（简答题、名词解释范围）</h3>
<h4 id="网络信息系统体系架构">网络信息系统体系架构</h4>
<p>第一层：<strong>基础设施</strong>（即<strong>综合布线</strong>）是<strong>架构</strong>的<strong>物理基础</strong></p>
<p>第二层：<strong>计算机网络通信协议</strong>及<strong>服务</strong>，是<strong>软件标准基础</strong></p>
<p>第三层：<strong>基础网络服务</strong>·：数据库、web、FTP等</p>
<p>第四层：OA系统、VOIP，视频会议等</p>
<p>网络<strong>管理</strong>平台和网络<strong>安全</strong>平台是<strong>贯穿</strong>四层的<strong>支撑平台</strong></p>
<h4 id="网络生命周期思科公司提出了规划-设计-实现-运行-优化pdioo网络生命周期">网络生命周期（思科公司提出了规划-设计-实现-运行-优化（PDIOO）网络生命周期）</h4>
<p><strong>规划</strong>（Planning）:确定详细的网络需求，并检查 现有网络。</p>
<p><strong>设计</strong>（Design）：根据初始的需求和对现有网络 分析中所收集到的额外信息设计网络，并与用户 一起改进设计方案。</p>
<p><strong>实现</strong>（Implementation）:根据得到认可的设计方 案构建网络。</p>
<p><strong>运行</strong>（Operation）：网络开始运转，并且受到监测，这个阶段是设计方案的最终测试。</p>
<p><strong>优化</strong>（Optimization）：在这个阶段会发现和纠正一些问题，或者在问题出现之前， 或者在发生故障之后。如果存在的问题太多，可能需要重新设计。</p>
<p><strong>退役</strong>（Retire）：虽然没包含在PDIOO中，但网络淘汰是不可避免的.当升级的代 价等于甚至大于重新建设的成本时，则必须考虑网络退役。</p>
<h3 id="技术指标名词解释的范围">技术指标（名词解释的范围）</h3>
<p><strong>网络带宽</strong>（bandwidth）是指<strong>给定时间</strong>内通过<strong>某个网络</strong>的<strong>信息量</strong>，它与网络的<strong>传输容量</strong>和<strong>传输能力</strong>是息息相关的。</p>
<p><strong>吞吐量</strong>(throughput)是指一组<strong>特定的数据</strong>在<strong>特定的时间段</strong>，经过<strong>特定的路径</strong>所传输的<strong>信息量</strong>的<strong>实际测量值</strong>。</p>
<p><strong>差错率</strong>：在数据链路层和网络层都存在差错控制。差错控制其实与网络传输的服务质量相关，不同的用户对服务质量的要求是不同的， 选择的网络设备也不同，这样就关系到性价比。网络系统的主要设备是交换机和路由器， 均为分组方式实现交换和转发，分组数据传输服务质量与用户业务和网络服务有关。</p>
<p><strong>网络时延</strong>是指从<strong>发送方发送</strong>报文的<strong>第一个比特</strong>开始，到网络另外一端<strong>接收方接收</strong>到 这个报文的<strong>最后一个比特</strong>为止所花费的时间。时延由4个部分组成：<strong>处理时延</strong>、<strong>排队时延</strong>、<strong>传播时延</strong>和<strong>传输时延</strong>。</p>
<p><strong>网络路由</strong>在<strong>Internet</strong>和<strong>企业内部网</strong>、<strong>局域网</strong>之间互连主要都是通过<strong>IP路由器</strong>实现的。路由器的主要功能就是负责接收各个网络入口的分组，并把分组从相应的出口转发出去。路由器使用各种路由协议，提供网络路径选择，并对流量和访问进行控制。</p>
<h3 id="层次化模型">层次化模型</h3>
<p>•<strong>接入层</strong>：为<strong>用户</strong>提供<strong>接入网络</strong>的<strong>服务</strong>，也称为访问层。</p>
<p>•<strong>分布层</strong>：提供<strong>用户</strong>到<strong>核心层</strong>之间的<strong>连接</strong>，也称为汇聚层。</p>
<p>•<strong>核心层</strong>：<strong>高速</strong>的<strong>网络骨干</strong>。</p>
<h4 id="层次化模型的优缺点">层次化模型的优缺点</h4>
<p><strong>优点：</strong></p>
<p>1、三层结构<strong>减轻</strong>了内层网络主设备的<strong>负载</strong>。</p>
<p>2、降低了<strong>网络成本</strong>，便于<strong>网络管理</strong>，降低网络运行<strong>维护花费</strong>。</p>
<p>3、简化了设计元素，易于<strong>理解</strong>。</p>
<p>4、容易变更<strong>层次结构</strong>。局部升级不会影响其他部分，<strong>扩展方便</strong>。</p>
<p><strong>缺点：</strong></p>
<p>容易引入设计错误，有可能将两个分支连接起来这种错误会造成网络回环，对编制网络文档和排错带来巨大麻烦。</p>
<h3 id="广播风暴生成树协议-广播域等名词解释与简答题范围">广播风暴，生成树协议、广播域等（名词解释与简答题范围）</h3>
<p><strong>生成树协议</strong>(Spanning Tree Protocol, STP)：首先选择一个交换机作为<strong>根网桥</strong>, 计算出其他所有交换机到根网桥的<strong>最佳路径</strong>，而把备用路径状态设为<strong>堵塞状态</strong>，当最佳路径<strong>发生故障</strong>时再<strong>启用</strong>备用路径，这样就可以<strong>避免广播风暴</strong>。</p>
<p><strong>广播风暴</strong>是指由于<strong>网络拓扑</strong>的<strong>设计和连接</strong>问题或其他原因使<strong>广播帧</strong>在局域网内<strong>循环传播</strong>，导致<strong>网络性能下降</strong>甚至<strong>网络瘫痪</strong>的情况。</p>
<p><strong>广播域</strong>（Broadcast Domain）实质就是由两层交换机所连接的一组<strong>冲突域</strong>。一个大型的两层交换式以太网仍然是一个<strong>广播域</strong>。</p>
<h3 id="atm-isdn-xdsl名词解释题">ATM、ISDN、XDSL（名词解释题）</h3>
<p><strong>ISDN</strong>：综合业务数字网（Integrated Service Digital Network. ISDN）利用<strong>公用电话网</strong>向<strong>用户</strong>提供<strong>端对端数字信道连接服务</strong>。</p>
<p><strong>XDSL</strong>：数字用户环路 XDSL （Digital Subscriber Loop）是 HDSL、ADSL 和 VDSL 等技术的统称。</p>
<p>ATM：异步传输模式 ATM（ Asynchronous Transfer Mode）是在<strong>分组交换技术</strong>的基础上发展起来的<strong>快速分组交换技术</strong>。</p>
<h3 id="wlan通信原理以及wlan设计注意事项简答题范围">WLAN通信原理以及WLAN设计注意事项（简答题范围）</h3>
<h4 id="wlan中传输的帧分成以下几类">WLAN中传输的帧分成以下几类：</h4>
<p><strong>数据帧</strong>：<strong>网络业务数据</strong>。</p>
<p><strong>控制帧</strong>：使用<strong>请求发送</strong>、清除<strong>发送和确认信号控制</strong>对介质的访问。</p>
<p><strong>管理帧</strong>：类似于数据帧，与当前<strong>无线传输的控制</strong>有关。</p>
<p>其中只有数据帧与以太网的802.3帧相似，但以太网帧的大小不能超过1518B,而无线网帧的大小可以达到2346B。</p>
<p><strong>无线站点</strong>可以通过两种方法选择AP进行数据帧转发：第一种方法是让无线站点主动发送<strong>探测帧</strong>扫描网络以寻找AP，这种方法称为<strong>主动扫描</strong>；第二种方法是让AP定期发送一 个宣告自己能力的<strong>信标帧</strong>，这种方法称为<strong>被动扫描</strong>。</p>
<p><strong>主动扫描</strong>的工作过程如下：</p>
<p>(1)  无线站点发送探测帧。</p>
<p>(2)  所有接收到该探测帧的AP用探测响应帧来应答。</p>
<p>(3)   无线站点从中选择一个AP,并向该AP发送•个关联请求帧。</p>
<p>(4)   选中的AP用关联响应帧来应答。</p>
<p>在<strong>被动扫描</strong>中，无线站点在接收到AP定期发出的信标帧后，只需要向该AP发回一 个关联请求帧就可以完成站点与AP的关联。</p>
<h4 id="设计wlan需要考虑如下事项">设计WLAN需要考虑如下事项</h4>
<p>1、站点测量</p>
<p>2、WLAN漫游</p>
<p>3、 点到点网桥</p>
<h3 id="恶意软件名词解释与选择判断题范围">恶意软件（名词解释与选择判断题范围）</h3>
<p><strong>病毒</strong>是附着于程序或文件中的<strong>一段计算机代码</strong>，可在计算机之间传播。它一边传播一边感染计算机。病毒可<strong>损坏</strong>软件、硬件和文件。</p>
<p>与病毒相似，<strong>蠕虫</strong>也是从一台计算机复制到另一台计算机，<strong>但这种复制是它自动进行</strong>。首先，它控制计算机具备传输文件或信息的功能，潜入你的系统并允许其他人远程控制你的计算机。最危险的是**，蠕虫可大量复制。**</p>
<p><strong>木马</strong>是指表面上<strong>有用的软件</strong>，实际上却是危害计算机<strong>安全</strong>并导致严重破坏的计算机程序。</p>
<p><strong>恶意软件</strong>实际上是指以网络为平台，对信息安全产生威胁的所有程序的总和。</p>
<h3 id="拒绝服务攻击名词解释与简答题范围">拒绝服务攻击（名词解释与简答题范围）</h3>
<p><strong>拒绝服务攻击</strong>（Denial of Service, DoS）是指通过合法的手段使服务器不能正常提供服务的攻击方法。最基本的DoS攻击就是利用合理的服务请求占用过多的服务器资源， 从而使合法用户无法得到服务器的响应。</p>
<p>SYN泛洪：黑客向服务器发送无数个TCP的同步请求，而服务器则回复每一个请求，并且分配部分计算资源，以便在连接成为“全连接”时提供服务。处于“半连接”的服务器一般会重传恢复，并	等待一段时间后放弃这个半开连接。被半开连接淹没的服务器会很快耗尽资源.以至于不能再为即将到来的连接请求分配资源，因此这种攻击就称为拒绝服务攻击。</p>
<h3 id="威胁防御-流量过滤-防火墙-ids-ips-蜜罐名词解释范围">威胁防御、流量过滤、防火墙、IDS、IPS、蜜罐（名词解释范围）</h3>
<p><strong>威胁防御</strong>：指的是预防那些已知的和未知的攻击而采用的必要行为。</p>
<p><strong>病毒防护</strong>：病毒防护要从<strong>防毒</strong>、<strong>查毒</strong>和<strong>解毒</strong>3方面进行，信息系统对病毒的防御能力和效果也要从防毒能力、査毒能力和解毒能力这3个方面来评估。</p>
<p><strong>流量过滤</strong>：在<strong>数据链路层</strong>上可以使用 <strong>MAC地址</strong>实现流量过滤，<strong>在网络层</strong>上利用<strong>IP地址</strong>进行过滤，在<strong>传输层上</strong>利用<strong>端口号</strong>进行过滤。比较常用的是在网络层进行<strong>报文过滤</strong>，可以进一步分为<strong>静态报文过滤</strong>和<strong>动态报文过滤</strong>。</p>
<p><strong>防火墙</strong>：防火墙(Firewall)实际上是一种<strong>访问控制技术</strong>，在某个机构的网络和不安全网络之间设置<strong>障碍</strong>，阻止对信息资源的<strong>非法访问</strong>，也可以使用防火墙<strong>阻止</strong>保密信息从受保护网络上被非法输出。现有的防火墙主要有<strong>包过滤</strong>型、<strong>应用网关</strong>型、<strong>代理服务</strong>型和<strong>复合型</strong>防火墙。</p>
<p><strong>入侵检测IDS</strong>是对入侵行为的发觉。它通过对计算机网络或计算机系统中的若干关键点收集信息并对其进行分析，从中发现网络或系统中是否有<strong>违反安全策略</strong>的行为和被攻击的迹象。进行入侵检测的软件与硬件的组合便是IDS。</p>
<p><strong>IPS</strong> 是在入侵检测的基础上对违反安全策略的行为和攻击进行<strong>过滤</strong>、<strong>拒绝</strong>和<strong>丢弃报文处理</strong>的软件和硬件系统。</p>
<h3 id="虚拟专用网-vpn安装机制-vpn与专线区别-ipsecvpn与sslvpn区别-文件加密与数字签名简答题范围">虚拟专用网、VPN安装机制、VPN与专线区别、IPsecVPN与SSLvpn区别、文件加密与数字签名（简答题范围）</h3>
<p><strong>虚拟专用网</strong>（Virtual Private Network. VPN）是一种利用公共网络来构建私人专用网络的技术，用于构建VPN的公共网络包括Internet,帧中继和ATM等。</p>
<p><strong>VPN安装机制</strong>：VPN系统一般都会采用加密技术，通过VPN隧道传输的数据都会被加密。隧道可以由VPN设备建立或者使用VPN软件的远程用户建立。</p>
<p>与传统的专线网络相比,VPN虚拟专网具备以下优势：</p>
<p>1、廉价的网络接入。</p>
<p>2、严格的用户认证。</p>
<p>3、高强度的数据保密。</p>
<p>IPSec VPN与SSL VPN相比，分别具有各自的优缺点。</p>
<p>(1)  IPSec VPN多用于&quot;网-网”连接,SSL VPN用于“移动客户-网”连接。SSL VPN 的移动用户使用标准的浏览器，无须安装客户端程序；而IPSec VPN的移动用户需要安装专门的IPSec客户端软件。</p>
<p>(2)  SSL VPN是基于应用层的VPN,而IPSec VPN是基于网络层的VPN。</p>
<p>(3)  SSL VPN隧道可以穿透防火墙；而IPSec客户端需要支持“NAT穿透”功能才能穿透防火墙。</p>
<p>(4)  SSL VPN更容易提供细粒度访问控制，可以对用户的权限、资源、服务和文件进行更加细致的控制。而IPSec VPN主要基于IP五元组对用户进行访问控制。</p>
<p>文件加密往往分成两种情况：<br>
一种是对信息本身要求安全保密，使用加密算法将文件完整加密；<br>
另一种情况则仅仅为验证信息的完整性、真实性和不可否认性，仅仅需要找到等同于亲笔签名效用的电子签名即可，这就是数字签名 (Digital Signature) 。</p>
<p>数字签名的概念和纸质文件签名类似，当发送电子文件时，可以对整个文件签名，也可以对文件的摘要(也称为报文摘要.Message Digest)进行签名。</p>
<p>在数字签名中，公钥和私钥的作用是不同的，私钥用来签名。而公钥用来验证签名。</p>
<h3 id="intserv模型与diffserv模型简答题范围">IntServ模型与DiffServ模型（简答题范围）</h3>
<p>IntServ服务模型在发送报文前，需要向网络申请特定的服务。这个请求是通过信令（Signal）来完成的，应用程序首先通知网络它自己的流量参数和需要的特定服务质量请求，包括带宽和时延等，应用程序一般在收到网络的确认信息后发送报文。</p>
<p>DiffServ即区别服务模型，与IntServ不同，它不需要信令，即应用程序在发出报文前，不需要通知路由器。网络不需要为每个流维护状态，它根据每个报文指定的QoS来提供特定的服务。</p>
<h3 id="分类与标记-拥塞避免-拥塞管理-链路专用工具名词解释范围">分类与标记、拥塞避免、拥塞管理、链路专用工具（名词解释范围）</h3>
<p><strong>分类</strong>是分析报文并按不同类别进行排序的一个过程。<strong>标记</strong>是把报文类别标记放入报文的过程。</p>
<p><strong>拥塞避免技术</strong>可以监测网络流量负载,以便在出现问题之前能够<strong>预测</strong>并避免拥塞，在队列<strong>充满</strong>时丢弃优先级较低的报文。</p>
<p><strong>拥塞管理</strong>可以看作是两个过程：排队和调度，排队是把<strong>业务</strong>分散到不同的<strong>队列</strong>和<strong>缓冲</strong>中，而<strong>调度</strong>是确定下一次该<strong>发送</strong>哪个队列和业务。</p>
<p><strong>链路专用工具</strong>：在点到点WAN连接的两端使用链路专用工具可以减少<strong>带宽需求</strong>或<strong>传播时延</strong>。</p>
<h3 id="dns解析过程-dns的分类-ftp工作原理-dhcp服务器特性简答题范围">DNS解析过程、DNS的分类、FTP工作原理、DHCP服务器特性（简答题范围）</h3>
<h4 id="dns解析过程">DNS解析过程</h4>
<p>当程序与远程计算机<strong>通信</strong>时， 应用程序通过<strong>DNS客户端软件</strong>向DNS服务器发出一个请求，请求远程计算机的IP地址。DNS服务器用远程主机名作为关键字，在DNS服务器的<strong>高速缓存</strong>中査找。若缓存中没有，则在<strong>数据库</strong>查找。若找到远程计算机主机名，则将远程计算机的IP地址返回给发出请求的本地计算机。若仍然找不到，优先查找<strong>本地DNS服务器</strong>，然后是<strong>根域</strong>到<strong>顶级域</strong>再到<strong>二级域</strong>，直至找到目的计算机的IP。</p>
<h4 id="dns的分类">DNS的分类</h4>
<p>主DNS服务器完成分区内主机名及其相关信息的管理、更新和维护。</p>
<p>辅DNS服务器对分区内主DNS服务器的数据库信息进行备份。</p>
<p>缓存服务器是利用服务器缓存来存储从上级域或其他的DNS域收到的信息，一直到 信息过期或作废为止。</p>
<h4 id="ftp-工作原理">FTP 工作原理</h4>
<p>FTP应用需要建立两条TCP连接，一条为控制连接，另一条为数据连接。根据数据连接由服务器端发起还是客户端发起,FTP服务器的工作模式可以分成两类：端口模式 和被动模式。端口模式（Port FTP）也称主动模式，由服务器发起数据传输请求，21为控制端口，20为数据端口。被动模式（Pasv FTP）,由客户端发起数据传输请求，并确定传输数据所使用的端口。</p>
<h4 id="dhcp服务器特性">DHCP服务器特性</h4>
<p>(1)  自动管理IP地址，防止重复的IP地址。</p>
<p>(2)  支持BOOTP客户，这样客户可以很容易地从BOOTP网络转移到DHCP网络。</p>
<p>(3)  管理员可以设置地址的租用时间。</p>
<p>(4)  可以限制哪些MAC地址能够享受动态IP地址服务.也可固定将一个MAC地 址和IP地址绑定。</p>
<p>(5)  可以定义一个被动态分配的IP地址池。地址池可以使用非连续的IP地址。</p>
<p>(6)  支持在不同IP网络(或子网)上的两个以上IP地址池的联合。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MapReduce框架]]></title>
        <id>https://zj11224.github.io/post/2022.05.20.MapReduce框架/</id>
        <link href="https://zj11224.github.io/post/2022.05.20.MapReduce框架/">
        </link>
        <updated>2022-05-19T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>MIT6.824课程实验lab1--MapReduce框架</p>
<p>后文的master等同于coordinator</p>
<p>参考：<br>
<a href="https://pdos.csail.mit.edu/6.824/labs/lab-mr.html">官网lab1资料</a><br>
<a href="https://zhuanlan.zhihu.com/p/122571315">MapReduce论文翻译</a><br>
<a href="https://zhuanlan.zhihu.com/p/425093684">MapReduce实验代码、思路</a></p>
<h3 id="开始"><strong>开始</strong></h3>
<h4 id="一-rpc通信">一、rpc通信</h4>
<p>rpc包提供了通过网络或其他I/O连接对一个对象的导出方法的访问。服务端注册一个对象，使它作为一个服务被暴露，服务的名字是该对象的类型名。注册之后，对象的导出方法就可以被远程访问。</p>
<p>因为进程之间需要通信，如work从master领取任务，work告诉master自己任务状态。<br>
这个通信过程我们通过rpc完成。</p>
<h5 id="1-服务端注册监听">1、服务端注册监听</h5>
<pre><code class="language-go">func (c *Coordinator) server() {
    // 注册
    rpc.Register(c)
    // http监听
    rpc.HandleHTTP()
    l, e := net.Listen(&quot;tcp&quot;, &quot;:1234&quot;)
    if e != nil {
        log.Fatal(&quot;listen error:&quot;, e)
    }
    // 指定监听端口
    go http.Serve(l, nil)
}
</code></pre>
<pre><code class="language-go">// 可以被客户端调用的函数必须符合以下两个条件
// 1、两个参数
// 2、返还值error
func (c *Coordinator) DistributeJob(args, reply *Job) error {}
</code></pre>
<h5 id="2-客户端呼叫服务端">2、客户端呼叫服务端</h5>
<pre><code class="language-go">client, err := rpc.DialHTTP(&quot;tcp&quot;, serverAddress + &quot;:1234&quot;)
if err != nil {
	log.Fatal(&quot;dialing:&quot;, err)
}
</code></pre>
<h5 id="3-客户端调用服务端方法">3、客户端调用服务端方法</h5>
<pre><code class="language-go">var args, reply int
// 参数类型要和服务端函数相同
err = client.Call(&quot;Coordinator.DistributeJob&quot;, args, &amp;reply)
if err != nil {
	log.Fatal(&quot;Coordinator error:&quot;, err)
}
</code></pre>
<h4 id="二-枚举">二、枚举</h4>
<figure data-type="image" tabindex="1"><img src="https://zj11224.github.io/post-images/2022.05.20_MapReduce%E6%A1%86%E6%9E%B6/enum.jpg" alt="enum" loading="lazy"></figure>
<h4 id="三-结构体">三、结构体</h4>
<figure data-type="image" tabindex="2"><img src="https://zj11224.github.io/post-images/2022.05.20_MapReduce%E6%A1%86%E6%9E%B6/struct.jpg" alt="struct" loading="lazy"></figure>
<h4 id="四-关键分配任务逻辑">四、关键分配任务逻辑</h4>
<figure data-type="image" tabindex="3"><img src="https://zj11224.github.io/post-images/2022.05.20_MapReduce%E6%A1%86%E6%9E%B6/distribute.jpg" alt="distribute" loading="lazy"></figure>
<h4 id="五-细节">五、细节</h4>
<ol>
<li>先监听服务再执行channel，不然work无法获得任务（本质是channel堵塞无法往下执行）。</li>
<li>channel默认一个缓存，当里面的数据没有被接收时会堵塞。<br>
以为创建发送任务和接收任务并发执行，所以建议初始化channel缓存长度大于任务数。</li>
<li>shell脚本循环执行命令，只有上一条命令完成时，才会执行下一条命令，不是并发执行。<br>
想要并发执行，命令后面添加&amp;（后台同时执行）。</li>
<li>rpc中Call，参数必须实例化！！！</li>
</ol>
<h4 id="五-完善">五、完善</h4>
<p>目前只基本实现了功能，后面的crash.go的随机kill和延迟还没有解决。<br>
而且是参照大佬的实验步骤，所以部分细节还是有一些迷糊。</p>
<p>因为后面的raft大作业需要用到，先到lab2学习。</p>
<hr>
<p>所有的实验步骤到此结束，<strong>再会！！！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu vsftpd远程配置]]></title>
        <id>https://zj11224.github.io/post/2022.05.05.Ubuntu vsftpd远程配置/</id>
        <link href="https://zj11224.github.io/post/2022.05.05.Ubuntu vsftpd远程配置/">
        </link>
        <updated>2022-05-04T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>记录个人ubuntu16.04中vsftpd服务的配置。</p>
<p>配置结束后，部分cmd命令无法远程，但是可以通过资源管理器地址栏登录，就可以上传下载文件。</p>
<h3 id="开始"><strong>开始</strong></h3>
<h4 id="一-安装vsftpd服务">一、安装vsftpd服务</h4>
<pre><code class="language-shell"># 安装vsftpd
sudo apt-get install vsftpd
sudo service vsftpd start|stop|restart
# 服务自启动
sudo systemctl start vsftpd.service
# 连接端口为21，通过查看端口21是否监听，可看出ftp服务是否启动
sudo netstat -nltp | grep 21
</code></pre>
<h4 id="二-创建本地用户">二、创建本地用户</h4>
<pre><code class="language-shell">sudo mkdir /home/ftp
# 添加用户，-d指定用户目录，-s指定用户登录终端
sudo useradd -d /home/ftp -s /bin/bash ftp	
# 仅通过ftp登录
sudo usermod -s /sbin/nologin ftp
# 设置密码
sudo passwd ftp
	password
# 设置/home/ftp文件夹拥有者为ftp，使用者group为ftp
sudo chown ftp:ftp /home/ftp
</code></pre>
<h4 id="三-虚拟用户创建可跳过">三、虚拟用户创建（可跳过）</h4>
<pre><code class="language-shell"># 创建user.txt，文本格式为一行username，一行password
vim user.txt
	username1
	password1
	username2
	password2
	...

# 安装生成数据库文件的软件
sudo apt-get install db-util
# 将虚拟用户文件加密
sudo db_load -T -t hash -f /home/user.txt /etc/vsftpd_login.db
sudo chmod 600 /etc/vsftpd_login.db

# 存在bug，不能配置该文件，删掉
sudo rm /etc/pam.d/vsftpd
# 虚拟用户登录文件配置
vim /etc/pam.d/vsftpd.vu
	auth required pam_userdb.so db=/etc/vsftpd_login
	account required pam_userdb.so db=/etc/vsftpd_login
</code></pre>
<h4 id="四-设置文件基本配置">四、设置文件基本配置</h4>
<pre><code class="language-shell"># 编辑vsftpd配置文件
sudo vim /etc/vsftpd.conf
	listen=NO
	listen_ipv6=YES
	# 匿名
	anonymous_enable=YES|NO		
	# 本地
	local_enable=YES|NO		
    # 虚拟
	guest_enable=YES|NO
    # 虚拟用户所使用用户
	guest_username=ftp
	# 虚拟用户数据库文件路径，文件在/etc/pam.d/
	pam_service_name=vsftpd.vu	
	
	# 用户访问列表是否启用
	userlist_enable=YES|NO				
	userlist_file=/etc/vsftpd/vsftpd.user_list
	# YES:黑名单,NO:白名单
	userlist_deny=NO					
	
	# 禁止访问ftp根目录以外路径
    chroot_local_user=YES
    # 是否开启白名单
	chroot_list_enable=YES
    # 白名单
	chroot_list_file=/etc/vsftpd/vsftpd.chroot_list
	# 开启写模式
	allow_writeable_chroot=YES					
	
	# 用户各自配置文件夹
	user_config_dir=/etc/vsftpd/vsftpd_user_conf	
	
	# 开启ip访问控制列表，配置文件在/etc/hosts.allow|hosts.deny
	tcp_wrappers=YES
	
	# 默认配置 #
	local_mask=022
	dirmessage_enable=YES
	xferlog_enable=YES
	connect_from_port_20=YES
</code></pre>
<h4 id="五-各类文件配置格式">五、各类文件配置格式</h4>
<pre><code class="language-shell"># 用户访问其他路径控制列表
sudo vim /etc/vsftpd/vsftpd.chroot_list
	username1
	username2
	...

# 用户配置列表文件夹
sudo mkdir /etc/vsftpd/vsftpd_user_conf
# 更改对应用户名文件
vim /etc/vsftpd/vsftpd_user_conf/ftp
	# 禁止删除命令
	cmds_denied=DELE			
	...

# 用户访问vsftpd控制列表
sudo vim /etc/vsftpd.user_list			
	username1
	username2
	...

# ip访问vsftpd控制列表
sudo vim /etc/hosts.allow
	# vsftpd:ALL
	vsftpd:192.168.5.0/255.255.255.0
	...
sudo vim /etc/hosts.deny
	...
</code></pre>
<h4 id="六-用户各自配置文件">六、用户各自配置文件</h4>
<pre><code class="language-shell"># 用户各自配置文件
vim /etc/vsftpd_user_conf/username
	# 设置根目录
	local_root=/home/ftp
	
	# 开启上传文件所属更改
	chown_uploads=YES
	# 文件所属ftp用户
	chown_username=ftp	
	
	# 具体参数参考这篇博客 #
	# https://www.cnblogs.com/ssrs-wanghao/articles/13751408.html #
    write_enable=YES
    anon_world_readable_only=NO 
    anon_upload_enable=YES 
    anon_mkdir_write_enable=YES
    anon_other_write_enable=YES
</code></pre>
<h4 id="七-遇到的问题">七、遇到的问题</h4>
<p>这里说几个我遇到的错误代码：</p>
<p>500：如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还		有写权限，就会报该错误。<br>
去除主目录的写权限：<code>$ sudo chmod a-w /home/user</code><br>
或者配置文件添加：<code>allow_writeable_chroot=YES</code></p>
<p>550/425：未解决，初步推测是网络传输和端口控制的问题（但是我服务机并没有防火墙服务）。</p>
<p>但若通过资源管理器的地址栏登录，可以直接复制粘贴文件，以上问题就不会出现。</p>
<p>所有的配置到此结束，<strong>再会！！！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu Go环境配置]]></title>
        <id>https://zj11224.github.io/post/2022.04.26.Ubuntu Go环境配置/</id>
        <link href="https://zj11224.github.io/post/2022.04.26.Ubuntu Go环境配置/">
        </link>
        <updated>2022-04-25T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>简单记录下，linux下go环境配置的坑。</p>
<h3 id="开始"><strong>开始</strong></h3>
<h4 id="一-下载go安装包">一、下载GO安装包</h4>
<p>可以通过命令行下载（需要国内源）：<br>
<code>sudo apt-get install go</code><br>
但是这样无法选定安装路径，而且版本可能会过低，不推荐。</p>
<p>这里建议通过wget方式安装<br>
下载（国内镜像站）： https://studygolang.com/dl/golang/go1.15.linux-amd64.tar.gz<br>
解压：<code>sudo tar -C /usr/local -zxvf go1.15.linux-amd64.tar.gz</code></p>
<h4 id="二-配置环境变量">二、配置环境变量</h4>
<p>先打开环境变量配置文件<br>
<code>sudo vim ~/.bashrc</code></p>
<p>这里推荐<code>~/.bashrc</code><br>
因为之前尝试配置<code>/etc/profile</code>和<code>~/.profile</code>都出现过<strong>重开机后需要手动刷新</strong>的情况，非常奇怪<br>
这里推荐home目录下的<code>./bashrc</code></p>
<p>添加以下三行配置并保存退出</p>
<pre><code class="language-shell">#go解压位置
export GOROOT=/usr/local/go
#开发者目录
export GOPATH=/home/username/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>
<p>通过下面命令刷新，或者重启<br>
<code>source ~/.bashrc</code></p>
<h4 id="三-go-module设置">三、GO MODULE设置</h4>
<p>运行<code>go version</code><br>
若出现<code>go version go1.15 linux/amd64</code><br>
则说明配置成功</p>
<p>通过<code>go env</code>查看go的详细信息<br>
通过<code>go env -w GO111MODULE=on</code> 将GO111MODULE设置为开始，若已经启用，跳过<br>
通过<code>go env -w GOPROXY=https://goproxy.cn,direct</code> 将代理设置为国内源方便后面git clone</p>
<p>在你的工程文件夹下，输入以下命令<br>
<code>go mod init xxx</code><br>
xxx为你的项目名，不一定要和工程文件夹名相同</p>
<p>但是后面你的导入自己的包就要用到这个module名<br>
比如：<code>import xxx/packageName</code></p>
<p>所有的配置到此结束，<strong>再会！！！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu VSCode远程连接配置]]></title>
        <id>https://zj11224.github.io/post/2022.04.26.Ubuntu VSCode远程连接配置/</id>
        <link href="https://zj11224.github.io/post/2022.04.26.Ubuntu VSCode远程连接配置/">
        </link>
        <updated>2022-04-25T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>记录一下通过VSCode通过ssh插件远程Ubuntu虚拟机、编写go代码中遇到的一些坑。</p>
<h3 id="开始"><strong>开始</strong></h3>
<h4 id="一-虚拟机远程连接配置">一、虚拟机远程连接配置</h4>
<p>首先确认主机和虚拟机双方能ping通</p>
<p>执行以下命令</p>
<pre><code class="language-shell"># 安装ssh相关服务
sudo apt install openssh-server

# 修改配置文件
sudo gedit /etc/ssh/sshd_config
</code></pre>
<p>找到以下选项进行设置（我打开就是设置好了）：<br>
<code>Port 22</code><br>
<code>PermitRootLogin yes</code><br>
<code>PubkeyAuthentication yes</code></p>
<pre><code class="language-shell"># 启动ssh服务
sudo /etc/init.d/ssh start
# 设置开机自启动
sudo systemctl enable ssh
</code></pre>
<h4 id="二-vs-code配置">二、VS Code配置</h4>
<p>下载remote-ssh插件</p>
<p>配置config文件<br>
获取虚拟机ip <code>ifconfig</code></p>
<pre><code class="language-sh"># 自定义远程服务器名
Host hostname
	# 服务器ip
    HostName 192.168.x.xxx
    # 服务器上的用户名
    User username
    # ssh端口
    Port 22
# 上面代码后面的注释记得删，不然会报管道错误
</code></pre>
<h4 id="三-免密登录">三、免密登录</h4>
<p>windows主机下，在cmd下输入<code>ssh-keygen</code>生成密钥（需要git）<br>
生成路径如下：<br>
<code>C:\Users\username\.ssh\id_rsa</code><br>
<code>C:\Users\username\.ssh\id_rsa.pub</code></p>
<p>将其中<code>id_rsa.pub</code>发送到虚拟机内的<code>/home/username/.ssh</code>中。<br>
将其改名为<code>authorized_keys</code></p>
<p>添加<code>IdentityFile &quot;C:\Users\username\.ssh\id_rsa&quot;</code>到VSCode config文件中。</p>
<p>重启ssh即可。</p>
<h4 id="四-编写go代码">四、编写go代码</h4>
<p>若要用到定义跳转（ctrl+点击），代码补全等功能，vscode会提示下载插件<br>
点击下载可能会失败，因为是通过github下载。<br>
可以更改goproxy<br>
<code>go env -w GOPROXY=https://goproxy.cn,direct</code><br>
重新下载即可（自动下载到GOPATH路径下）。</p>
<p>还有两个注意点：</p>
<p>1、必须是go module管理项目，不然无法识别<strong>导入自定义包</strong>和<strong>当前编写文件外函数、变量</strong>。</p>
<p>2、main包中多个main函数会报错，可以将其放在不同文件夹下，即使多个main函数也不会报错。</p>
<p>所有的配置到此结束，<strong>再会！！！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode C++json文件配置]]></title>
        <id>https://zj11224.github.io/post/2022.01.23.VSCode C++json文件配置/</id>
        <link href="https://zj11224.github.io/post/2022.01.23.VSCode C++json文件配置/">
        </link>
        <updated>2022-01-22T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>VS Code C++个人json文件配置备份</p>
<h3 id="开始"><strong>开始</strong></h3>
<h4 id="一-launchjson调试运行配置">一、launch.json（调试运行配置）</h4>
<pre><code class="language-json">{  
    &quot;version&quot;: &quot;0.2.0&quot;,  
    &quot;configurations&quot;: [  
        {  
            &quot;name&quot;: &quot;c++ debug&quot;,        // 配置名称
            &quot;type&quot;: &quot;cppdbg&quot;,           // 配置类型，这里只能为cppdbg  
            &quot;preLaunchTask&quot;: &quot;compile&quot;, // 调试前任务(编译)
            &quot;request&quot;: &quot;launch&quot;,        // 请求配置类型，可以为launch或attach  
            &quot;program&quot;: &quot;${workspaceFolder}/build/${fileBasenameNoExtension}.exe&quot;,// 将要进行调试的程序的路径  
            &quot;args&quot;: [
                &quot;&lt;&quot;,
                &quot;${workspaceFolder}/input&quot;,//数据输入文件
                &quot;&gt;&quot;,
                &quot;${workspaceFolder}/output&quot;//数据存储文件
            ],                              // 程序调试时传递给程序的命令行参数
            &quot;stopAtEntry&quot;: false,           // 程序入口是否断点
            &quot;cwd&quot;: &quot;${workspaceFolder}&quot;,    // 调试程序时的工作目录
            &quot;environment&quot;: [],              // 环境依赖
            &quot;externalConsole&quot;: false,       // 调试时是否显示cmd
            //&quot;console&quot;: &quot;internalConsole&quot;, // 输出显示
            &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;,  // 是否跳到调试控制台
            &quot;MIMode&quot;: &quot;gdb&quot;,                // 指定连接调试器
            &quot;miDebuggerPath&quot;: &quot;gdb.exe&quot;, 	// miDebugger的路径
            &quot;setupCommands&quot;: [  
                {   
		            &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,  
                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,  
                    &quot;ignoreFailures&quot;: true  
                }  
            ]  
        }  
    ]  
}
</code></pre>
<h4 id="二-tasksjson任务配置">二、tasks.json（任务配置）</h4>
<p>任务（即选择一个任务名，运行内部封装的一套命令）</p>
<p>这里主要是封装编译的命令</p>
<pre><code class="language-json">{
    &quot;version&quot;: &quot;2.0.0&quot;,
    &quot;tasks&quot;: [
        {
            &quot;type&quot;: &quot;shell&quot;,    // 任务类型
            &quot;label&quot;: &quot;compile&quot;,     // 任务名
            &quot;command&quot;: &quot;D:\\Program\\mingw64\\bin\\g++.exe&quot;,    // 编译器路径
            &quot;args&quot;: [
                &quot;-g&quot;,
                &quot;${file}&quot;,
                &quot;-o&quot;,
                &quot;${workspaceFolder}/build/${fileBasenameNoExtension}.exe&quot;,
            ],
            &quot;options&quot;: {
                &quot;cwd&quot;: &quot;${workspaceFolder}&quot;
            },
            &quot;problemMatcher&quot;: [
                &quot;$gcc&quot;
            ]
        }
    ]
}
</code></pre>
<h4 id="三-c_cpp_propertiesjson插件配置">三、c_cpp_properties.json（插件配置）</h4>
<pre><code class="language-json">{
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;Win32&quot;,
            &quot;includePath&quot;: [
                &quot;${workspaceFolder}&quot;
            ],
            &quot;defines&quot;: [],
            &quot;compilerPath&quot;: &quot;D:\\Program\\mingw64\\bin\\g++.exe&quot;,
            &quot;browse&quot;: {
                &quot;path&quot;: [
                    &quot;${workspaceFolder}&quot;    // 符号路径搜索区
                ]
            },
            &quot;cStandard&quot;: &quot;c11&quot;,
            &quot;cppStandard&quot;: &quot;c++17&quot;
        }
    ],
    &quot;version&quot;: 4
}
</code></pre>
<p>所有的配置到此结束，<strong>再会！！！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VMware Ubuntu虚拟机环境搭建教程]]></title>
        <id>https://zj11224.github.io/post/2022.01.18.VMware Ubuntu虚拟机环境搭建教程/</id>
        <link href="https://zj11224.github.io/post/2022.01.18.VMware Ubuntu虚拟机环境搭建教程/">
        </link>
        <updated>2022-01-17T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>我们这里主要针对ubuntu系统安装完毕后的以下问题。</p>
<p>联网、换源、中文环境。</p>
<h3 id="开始"><strong>开始</strong></h3>
<h4 id="准备工作"><strong>准备工作</strong></h4>
<p>VMware <a href="https://www.vmware.com/cn/products/workstation-pro.html">官网下载</a>: 下载试用版，然后去网上找激活码激活</p>
<p>ubuntu <a href="http://mirrors.aliyun.com/ubuntu-releases/16.04/">镜像下载</a>: 下载ubuntu16.04</p>
<p>接着在VMware新建虚拟机，挂载ubuntu的iso文件，剩下的按照他的流程走即可。</p>
<h4 id="一-联网">一、联网</h4>
<h5 id="1-vmware虚拟网卡配置">1、VMware虚拟网卡配置</h5>
<p>Workstation -&gt; 编辑 -&gt; 虚拟网络编辑器</p>
<figure data-type="image" tabindex="1"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.1.1.%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1.png" alt="" loading="lazy"></figure>
<p>添加网络 -&gt; 选择VMnet8, 显示如下:</p>
<figure data-type="image" tabindex="2"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.1.2.%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>更改NAT设置</p>
<figure data-type="image" tabindex="3"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.1.3.nat%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>更改DHCP设置</p>
<figure data-type="image" tabindex="4"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.1.4.dhcp%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<h5 id="2-本地适配器设置">2、本地适配器设置</h5>
<p>右键WIFI图标 -&gt; 打开网络和Internet设置 -&gt; 下滑找到更改适配器 -&gt; 点击，显示如下：</p>
<figure data-type="image" tabindex="5"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.2.1.%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>点击VMnet8 -&gt; 属性 -&gt; &quot;Internet协议版本4(TCP/IPv4)&quot; -&gt; 修改ip(网段要和虚拟网卡相同)，显示如下：</p>
<figure data-type="image" tabindex="6"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.2.2.vmnet8%E9%85%8D%E7%BD%AE.png" alt="" loading="lazy"></figure>
<h5 id="3-ubuntu网卡设置">3、ubuntu网卡设置</h5>
<p>右键右上角上下箭头图标(网络) -&gt; Edit connections... -&gt; Add，显示如下：</p>
<figure data-type="image" tabindex="7"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.3.1.ubuntu%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.3.2.ubuntu%E5%A2%9E%E5%8A%A0%E7%BD%91%E5%8D%A1.png" alt="" loading="lazy"></figure>
<p>选中新添加网卡 -&gt; Edit -&gt; Ethernet -&gt; Device -&gt; ens33网卡，显示如下：</p>
<figure data-type="image" tabindex="9"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.3.3.ubuntu%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%8D%A1.png" alt="" loading="lazy"></figure>
<p>可能有些人的ubuntu不是16版本，就没有ens33这张网卡，可以通过ifconfig查看自己初始网卡是什么</p>
<figure data-type="image" tabindex="10"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.3.4.%E6%A3%80%E6%9F%A5%E7%BD%91%E5%8D%A1.png" alt="" loading="lazy"></figure>
<p>到此网络配置结束。</p>
<h5 id="4-网络检测">4、网络检测</h5>
<p>ubuntuIP通过ifconfig查看，本机IP通过ipconfig查看，可以相互ping以下，我这里是通的。</p>
<figure data-type="image" tabindex="11"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.4.1.%E8%99%9A%E6%8B%9F%E6%9C%BAping%E4%B8%BB%E6%9C%BA.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.4.2.%E4%B8%BB%E6%9C%BAping%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="" loading="lazy"></figure>
<p>ubuntu网卡这是这里其实可以通过命令行实现，但是这里有个前提。</p>
<p>即使通过命令行配置，图形化的配置也会覆盖掉命令行，所以需要先删除网卡配置图形化功能模块。</p>
<pre><code>网卡文件路径：/etc/network/interfaces
dns文件路径: /etc/ersolv.conf
</code></pre>
<p>dns文件是通过网卡文件生成的，也就是你配置了dns文件，下次开机也会重置，dns要在网卡文件里面配置。</p>
<p>但是dns文件配置后是有效的，只是下次开机重置了，只针对这次。</p>
<h4 id="二-换源">二、换源</h4>
<p>把国外的源换成本地的源，加快下载功能模块速度</p>
<h5 id="1-通过图形化界面换源">1、通过图形化界面换源</h5>
<p>System Settings（设置） -&gt; Software&amp;Updates，显示如下：</p>
<figure data-type="image" tabindex="13"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.1.1.%E6%8D%A2%E6%BA%90.png" alt="" loading="lazy"></figure>
<p>Download from -&gt; Others -&gt; China -&gt; 随便选，显示如下：</p>
<figure data-type="image" tabindex="14"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.1.2.%E6%8D%A2%E6%BA%90.png" alt="" loading="lazy"></figure>
<h5 id="2-通过命令行换源">2、通过命令行换源</h5>
<pre><code>sudo gedit /etc/apt/sources.list
</code></pre>
<p>清空里面内容，同时把下面内容复制上去</p>
<pre><code>deb http://mirrors.aliyun.com/ubuntu/ xenial main
deb-src http://mirrors.aliyun.com/ubuntu/ xenial main

deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main

deb http://mirrors.aliyun.com/ubuntu/ xenial universe
deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe

deb http://mirrors.aliyun.com/ubuntu/ xenial-security main
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main
deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe
</code></pre>
<p>更新</p>
<pre><code>sudo apt-get update
</code></pre>
<p>完成</p>
<h5 id="3-可能会遇到的问题">3、可能会遇到的问题</h5>
<p>sources.list被占用，杀死占用进程</p>
<pre><code> sudo fuser -vki /var/lib/apt/lists/lock
</code></pre>
<p>更新过程卡住</p>
<pre><code>sudo apt-get clean
sudo apt-get update
</code></pre>
<p>像下面的错误大概是链接复制错了，重新复制一下</p>
<figure data-type="image" tabindex="15"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.2.1.%E6%8D%A2%E6%BA%90%E9%97%AE%E9%A2%98.png" alt="" loading="lazy"></figure>
<h4 id="三-中文环境">三、中文环境</h4>
<p>Language Support -&gt; Install/Remove Language... -&gt; Chinese，显示如下：</p>
<figure data-type="image" tabindex="16"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.1.1.%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%8B%E8%BD%BD.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="17"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.1.2.%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>点击Language Support，选择汉语，应用，显示如下：</p>
<figure data-type="image" tabindex="18"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.1.3.%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>更改成功，重启虚拟机，显示如下：</p>
<figure data-type="image" tabindex="19"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.1.4.%E4%B8%AD%E6%96%87%E7%95%8C%E9%9D%A2.png" alt="" loading="lazy"></figure>
<h5 id="下载中文输入">下载中文输入</h5>
<p>Language Support -&gt; Keyboard input method system -&gt; fcitx，显示如下</p>
<figure data-type="image" tabindex="20"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.2.1.%E8%BE%93%E5%85%A5%E6%B3%95%E6%A1%86%E6%9E%B6.png" alt="" loading="lazy"></figure>
<p>下载搜狗输入法</p>
<pre><code>sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb
sudo apt-get install -f
</code></pre>
<figure data-type="image" tabindex="21"><img src="https://zj11224.github.io/post-images/2022.01.18_ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.2.2.%E4%BD%BF%E7%94%A8%E8%BE%93%E5%85%A5%E6%B3%95.png" alt="" loading="lazy"></figure>
<p>所有的配置到此结束，<strong>再会！！！</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VMwareTools问题]]></title>
        <id>https://zj11224.github.io/post/2022.01.18.VMwareTools问题/</id>
        <link href="https://zj11224.github.io/post/2022.01.18.VMwareTools问题/">
        </link>
        <updated>2022-01-17T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>本想解决虚拟机和本机间拖拽文件、文本复制粘贴公用，但是搞了一下午都没搞成功。</p>
<p>这里把我找到的一些方法写出来，应该能解决大部分人的问题。</p>
<p>若实在没法解决，也有一个共享文件夹的备用方案。</p>
<h3 id="开始"><strong>开始</strong></h3>
<h4 id="一-安装vmware-tools">一、安装VMware Tools</h4>
<h5 id="1-使用命令行下载官方推荐">1、使用命令行下载（官方推荐）</h5>
<p>执行下面三行命令即可</p>
<pre><code>sudo apt-get autoremove open-vm-tools
sudo apt-get install open-vm-tools
sudo apt-get install open-vm-tools-desktop

reboot
</code></pre>
<h5 id="2-使用自带的vmware-tools文件">2、使用自带的VMware Tools文件</h5>
<p>运行ubuntu，点击虚拟机，显示如下：</p>
<figure data-type="image" tabindex="1"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/1.1.1.vmtools%E7%81%B0%E8%89%B2.png" alt="" loading="lazy"></figure>
<p>部分人可能安装/重新安装VMware Tools是灰色的。</p>
<p>解决方法：</p>
<p>先关机，虚拟机 -&gt; 设置</p>
<p>将驱动器都设置为自动获取</p>
<figure data-type="image" tabindex="2"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/1.1.3.%E9%A9%B1%E5%8A%A8%E5%99%A8%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>也可以在驱动器上挂载VMware Workstation文件夹下的linux.iso/windows.iso(对应系统)</p>
<figure data-type="image" tabindex="3"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/1.1.4.%E9%A9%B1%E5%8A%A8%E5%99%A8%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>开机后就会自动获取了，显示如下：</p>
<figure data-type="image" tabindex="4"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/1.1.2.vmtools%E6%98%BE%E7%A4%BA%E6%AD%A3%E5%B8%B8.png" alt="" loading="lazy"></figure>
<p>点击下载</p>
<figure data-type="image" tabindex="5"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/1.2.1.vmtools%E5%85%89%E7%9B%98.png" alt="" loading="lazy"></figure>
<p>压缩文件提取</p>
<figure data-type="image" tabindex="6"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/1.2.2.vmtools%E5%8E%8B%E7%BC%A9%E5%8C%85%E6%8F%90%E5%8F%96.png" alt="" loading="lazy"></figure>
<p>然后在提取出来的文件夹里打开终端，执行下面命令</p>
<pre><code>sudo ./vmware-install.pl
sudo apt-get update
reboot
</code></pre>
<p>安装完成</p>
<h4 id="二-可能存在的问题">二、可能存在的问题</h4>
<p>我是为了能实现文件拖拽和复制共享才需要VMwareTools，但是尝试完上面两种安装方法都无法拖拽问题，下面是我百度到的一些解决方法，对我仍然无效，大家可以试一下。</p>
<h5 id="1-vmwaretools原有文件没有清理干净">1、VMwareTools**原有文件没有清理干净</h5>
<p>将VMwareTools清理干净，再次下载</p>
<pre><code>sudo vmware-uninstall-tools.pl
sudo apt-get remove open-vm-tools
sudo apt-get remove --auto-remove open-vm-tools
sudo apt-get purge open-vm-tools
</code></pre>
<h5 id="2-vmwaretools有bug下载补丁">2、VMwareTools有bug，下载补丁</h5>
<pre><code>git clone https://github.com/rasa/vmware-tools-patches.git
</code></pre>
<h5 id="3-mware拖拽文件选项没选">3、Mware拖拽文件选项没选</h5>
<p>虚拟机 -&gt; 设置 -&gt; 选项 -&gt; 客户机隔离 -&gt; 启用拖放+复制粘贴，显示如下：</p>
<figure data-type="image" tabindex="7"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/2.1.%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9D%83%E9%99%90.png" alt="" loading="lazy"></figure>
<h5 id="4-vmware增强型键盘">4、VMware增强型键盘</h5>
<p>虚拟机 -&gt; 设置 -&gt; 选项 -&gt; 常规 -&gt; 增强型键盘启用，显示如下：</p>
<figure data-type="image" tabindex="8"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/2.2.%E9%94%AE%E7%9B%98%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<h5 id="5-ubuntu进程未开启">5、ubuntu进程未开启</h5>
<pre><code>/usr/bin/vmware-user
</code></pre>
<p>以上就是我能找到关于文件拖拽功能的解决办法，基本上每种都有人回复有效，也都有人回复没用。</p>
<p>都可以试一下</p>
<h4 id="三-备用方案">三、备用方案</h4>
<p>虚拟机 -&gt; 设置 -&gt; 选项 -&gt; 常规 -&gt; 启用共享文件夹，设置文件路径，显示如下：</p>
<figure data-type="image" tabindex="9"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/3.1.%E5%90%AF%E7%94%A8%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="" loading="lazy"></figure>
<p>在本机找到共享文件 -&gt; 属性 -&gt; 共享, 显示如下：</p>
<figure data-type="image" tabindex="10"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/3.2.%E6%9C%AC%E6%9C%BA%E5%85%B1%E4%BA%AB%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>共享文件夹就在/mnt/hgfs目录下，</p>
<p>若没有再次重装VMwareTools（参考上面）<br>
或者运行下面命令</p>
<pre><code class="language-shell"># 确认是否配置成功，有输出共享文件夹名，则成功
vmware-hgfsclient
# 如果之前没有命令包则先执行sudo apt-get install open-vm-tools
sudo vmhgfs-fuse .host:/ /mnt/hgfs -o nonempty -o allow_other
</code></pre>
<p>接下来就能看到了</p>
<figure data-type="image" tabindex="11"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/3.3.%E6%88%90%E5%8A%9F%E5%85%B1%E4%BA%AB.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://zj11224.github.io/post-images/2022.01.18_VMwareTools%E9%97%AE%E9%A2%98/3.4.%E6%88%90%E5%8A%9F%E5%85%B1%E4%BA%AB.png" alt="" loading="lazy"></figure>
<p>所有的配置到此结束，<strong>再会！！！</strong></p>
<p>2022.04.04</p>
<p>找到复制粘贴的解决方案：</p>
<p>就是先执行上面的1、2</p>
<p>再执行下面的两行命令</p>
<pre><code>sudo apt-get install open-vm-tools
sudo apt-get install open-vm-tools-desktop
</code></pre>
<p>最后执行5</p>
<p>备注1：github可能要更改hosts文件才能连上、后面需要把vmware-user添加到自启动软件。</p>
<p>备注2：主机和虚拟机版本差别过大的话，文件拖拽可能会蓝屏，但是复制粘贴是没问题的。</p>
<p><strong>该方法多次重开机后，开始无法拖拽！！！</strong></p>
<p>最后Ubuntu16.04应该是有bug的，我换成20.04就行了，或者通过ftp进行文件传输。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea GitHub个人网站搭建教程]]></title>
        <id>https://zj11224.github.io/post/2022.01.15.Gridea GitHub个人网站搭建教程/</id>
        <link href="https://zj11224.github.io/post/2022.01.15.Gridea GitHub个人网站搭建教程/">
        </link>
        <updated>2022-01-15T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言"><strong>前言</strong></h3>
<p>虽然GitHub存在部分不用翻墙的站点，但是Gridea生成网页时所使用的url链接，是必须要翻墙的。</p>
<p>所以，下面的方法都是基于翻墙工具实现的。</p>
<p>参考了以下两篇博客</p>
<p><strong>大体配置</strong></p>
<p><a href="https://imyshare.com/article/36/#:~:text=%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%8D%E8%B4%B9%E5%BB%BA%E7%AB%99%E6%96%B9%E6%A1%88%201%20%E2%91%A0%E4%BD%BF%E7%94%A8GitHub%E6%88%96CODING%E5%85%8D%E8%B4%B9%E6%89%98%E7%AE%A1%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%B9%B6%E9%85%8D%20...%202,%E2%91%A1%E4%BD%BF%E7%94%A8Gridea%E8%BD%AF%E4%BB%B6%2B%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99%E4%B8%BB%E9%A2%98%EF%BC%8C%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%BD%91%E7%AB%99%E7%9A%84%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%20...%203%20%E2%91%A2%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%88%B0%E5%85%8D%E8%B4%B9%E7%9A%84%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E4%B8%8A%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E7%BD%91">零基础快速搭建一个属于自己的网站或博客，仅需一天，且完全免费！！！</a></p>
<p><strong>Gridea配置细节</strong></p>
<p><a href="https://www.luoyelusheng.com/post/Gridea%E5%90%8C%E6%AD%A5github%E5%A4%B1%E8%B4%A5%E6%9C%80%E7%BB%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Gridea同步github失败最终解决方案</a></p>
<h3 id="开始"><strong>开始</strong></h3>
<p>搭建思路如下：</p>
<ol>
<li>使用GitHub的仓库来免费获取二级域名，同时通过该仓库存放自己的博客</li>
<li>使用Gridea自动生成网页，通过Gridea操作博客</li>
</ol>
<h4 id="一-拥有一个github账号这里就是普通的注册">一、拥有一个GitHub账号（这里就是普通的注册）</h4>
<h4 id="二-创建仓库并生成二级域名用户名githubio">二、创建仓库，并生成二级域名（用户名.github.io</h4>
<p>创建仓库</p>
<figure data-type="image" tabindex="1"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.1.%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="" loading="lazy"></figure>
<p>设置仓库</p>
<figure data-type="image" tabindex="2"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.2.%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<h4 id="三-生成一个token用于gridea同步">三、生成一个token，用于gridea同步</h4>
<p>点击头像 -&gt; settings -&gt; developer settins -&gt; personal access tokens -&gt; Generate new token</p>
<figure data-type="image" tabindex="3"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.1.token%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.2.token%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.3.token%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>勾选repo，然后生成token，记得把token复制下来。</p>
<p>token只会在生成时显示，后面都看不到了。</p>
<figure data-type="image" tabindex="6"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.4.token%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<h4 id="四-gridea配置">四、Gridea配置</h4>
<p><a href="https://gridea.dev/">Gridea网站</a></p>
<figure data-type="image" tabindex="7"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3.gridea%E9%85%8D%E7%BD%AE.png" alt="" loading="lazy"></figure>
<p>其中因为同步要连接外网，所以需要使用科学上网工具（代理），通过代理连接到网络。</p>
<p>那么这里就需要让Gridea的流量都走代理的端口，这里需要用到下面的proxifier软件进行配置。</p>
<h4 id="五-proxifier配置">五、proxifier配置</h4>
<p>Mac版本地址：https://www.macwk.com/soft/proxifier<br>
Window版本地址：https://www.hanzify.org/software/13717.html</p>
<p>我这里使用Windows汉化版进行演示。</p>
<p>下载完毕后打开代理服务器</p>
<figure data-type="image" tabindex="8"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.1.1.%E7%82%B9%E5%87%BB%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="image-20220115225614046" loading="lazy"></figure>
<p>然后添加代理服务器</p>
<figure data-type="image" tabindex="9"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.1.2.%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE.png" alt="image-20220115225823932" loading="lazy"></figure>
<p>地址填127.0.0.1即可。</p>
<p>但是端口必须填你的<strong>代理（VPN）socks使用的端口号</strong></p>
<figure data-type="image" tabindex="10"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.1.3.%E4%BB%A3%E7%90%86%E7%AB%AF%E5%8F%A3%E5%B1%95%E7%A4%BA.png" alt="image-20220115230038953" loading="lazy"></figure>
<p>配置完检查以下，这个代理是否可用</p>
<figure data-type="image" tabindex="11"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.1.4.%E6%A3%80%E6%9F%A5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="image-20220115230211336" loading="lazy"></figure>
<p>检查没有问题后，接着配置代理规则</p>
<figure data-type="image" tabindex="12"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.2.2.%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99%E8%AE%BE%E7%BD%AE.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.2.1.%E7%82%B9%E5%87%BB%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99.png" alt="" loading="lazy"></figure>
<p>最后配置dns设置</p>
<figure data-type="image" tabindex="14"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.3.1.%E7%82%B9%E5%87%BBdns.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.3.2.%E9%85%8D%E7%BD%AEdns%E8%A7%A3%E6%9E%90%E8%A7%84%E5%88%99.png" alt="" loading="lazy"></figure>
<p>至此，所有配置完毕，点击同步。</p>
<figure data-type="image" tabindex="16"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.1.%E5%90%8C%E6%AD%A5%E6%88%90%E5%8A%9F.png" alt="" loading="lazy"></figure>
<p>输入连接：用户名.github.io</p>
<figure data-type="image" tabindex="17"><img src="https://zj11224.github.io/post-images/2022.01.15_%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.2.%E7%95%8C%E9%9D%A2%E5%B1%95%E7%A4%BA.png" alt="image-20220115231432784" loading="lazy"></figure>
<p>接下来就可以在gridea中更换主题，添加博客了。<br>
这里推荐用typora写博客，然后放到Gridea上。</p>
<p>所有的配置到此结束，<strong>再会！！！</strong></p>
<p>2022.05.05<br>
Gridea好像失效了，建议是通过Gridea<strong>同步</strong>生成配置文件（output/），然后手动将文件发到github上（可使用GitHub Desktop）。</p>
]]></content>
    </entry>
</feed>